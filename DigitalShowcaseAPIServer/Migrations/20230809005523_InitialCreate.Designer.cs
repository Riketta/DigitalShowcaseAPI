// <auto-generated />
using System;
using DigitalShowcaseAPIServer.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalShowcaseAPIServer.Migrations
{
    [DbContext(typeof(DigitalShowcaseContext))]
    [Migration("20230809005523_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconURL = "",
                            IsVisible = true,
                            Name = "Diablo IV",
                            Priority = 0
                        },
                        new
                        {
                            Id = 500,
                            IconURL = "",
                            IsVisible = false,
                            Name = "VersaDebug",
                            Priority = -1
                        });
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.Diablo4.Class", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Diablo4_Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Barbarian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Druid"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Necromancer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rogue"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sorcerer"
                        });
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.Diablo4.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Diablo4_ItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Helm"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pants"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Amulet"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ring"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Axe"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Mace"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sword"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Dagger"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Scythe"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Wand"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Bow"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Crossbow"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Polearm"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Two-Handed Axe"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Two-Handed Mace"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Two-Handed Sword"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Two-Handed Scythe"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Shield"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Totem"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Focus"
                        });
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.Diablo4.LotData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Diablo4_LotsData");
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UploadedByUserId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddedByUserId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSold")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Diablo4_LotDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSold")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VersaDebug_LotDataId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("Diablo4_LotDataId");

                    b.HasIndex("VersaDebug_LotDataId");

                    b.ToTable("Lots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedByUserId = -1,
                            Amount = 0u,
                            CategoryId = 500,
                            DateAdded = new DateTime(2023, 8, 9, 3, 55, 22, 930, DateTimeKind.Local).AddTicks(2722),
                            DateSold = new DateTime(2024, 12, 21, 3, 55, 22, 930, DateTimeKind.Local).AddTicks(2733),
                            ImageURL = "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png",
                            IsSold = false,
                            Price = -1m,
                            Priority = 5,
                            VersaDebug_LotDataId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddedByUserId = -1,
                            Amount = 0u,
                            CategoryId = 500,
                            DateAdded = new DateTime(2023, 8, 9, 3, 55, 22, 930, DateTimeKind.Local).AddTicks(2741),
                            DateSold = new DateTime(2026, 1, 25, 3, 55, 22, 930, DateTimeKind.Local).AddTicks(2741),
                            ImageURL = "https://www.minecraft.net/content/dam/games/minecraft/logos/logo-minecraft.svg",
                            IsSold = true,
                            Price = -1m,
                            Priority = 3,
                            VersaDebug_LotDataId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddedByUserId = -1,
                            Amount = 0u,
                            CategoryId = 500,
                            DateAdded = new DateTime(2023, 8, 9, 3, 55, 22, 930, DateTimeKind.Local).AddTicks(2743),
                            DateSold = new DateTime(2026, 11, 21, 3, 55, 22, 930, DateTimeKind.Local).AddTicks(2744),
                            ImageURL = "https://cdn.sstatic.net/Img/teams/teams-illo-free-sidebar-promo.svg",
                            IsSold = false,
                            Price = -1m,
                            Priority = 1,
                            VersaDebug_LotDataId = 3
                        });
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasMaxLength(172)
                        .HasColumnType("TEXT");

                    b.Property<string>("PassSalt")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("Roles")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            DateCreated = new DateTime(2003, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DebugUser",
                            PassHash = "Hash",
                            PassSalt = "Salt",
                            Roles = 0
                        });
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.VersaDebug.LotData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GUID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int?>("GemLevel")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("VersaDebug_LotsData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GUID = "GUID-0010",
                            GemLevel = 10
                        },
                        new
                        {
                            Id = 2,
                            GUID = "GUID-0020",
                            GemLevel = 20
                        },
                        new
                        {
                            Id = 3,
                            GUID = "GUID-0030",
                            GemLevel = 30
                        });
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.Diablo4.LotData", b =>
                {
                    b.HasOne("DigitalShowcaseAPIServer.Data.Models.Diablo4.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalShowcaseAPIServer.Data.Models.Diablo4.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.File", b =>
                {
                    b.HasOne("DigitalShowcaseAPIServer.Data.Models.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("DigitalShowcaseAPIServer.Data.Models.Lot", b =>
                {
                    b.HasOne("DigitalShowcaseAPIServer.Data.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalShowcaseAPIServer.Data.Models.Diablo4.LotData", "LotData_Diablo4")
                        .WithMany()
                        .HasForeignKey("Diablo4_LotDataId");

                    b.HasOne("DigitalShowcaseAPIServer.Data.Models.VersaDebug.LotData", "LotData_VersaDebug")
                        .WithMany()
                        .HasForeignKey("VersaDebug_LotDataId");

                    b.Navigation("AddedByUser");

                    b.Navigation("LotData_Diablo4");

                    b.Navigation("LotData_VersaDebug");
                });
#pragma warning restore 612, 618
        }
    }
}
